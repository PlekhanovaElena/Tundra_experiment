summary(ins)
ins
source('~/Tundra_exp/R_code/functions.R')
plot_diff(ins, ynames[3])
cl =  4 # coloumn of the data
n_samp = 5 # number of samples for each plot
normpv = sapply(c(0:29), function(x) shapiro.test(can[(1 + n_samp*x):(n_samp*x+n_samp), cl])$p.value)
ins_path <- "/home/lena/Tundra_exp/soil_variables_DPE.xlsx"
ins <- read.xlsx(ins_path, 1)  # read first sheet
clmn = colnames(ins) %in% c("Blk", "Plot.", "Air.temperature...C.", "Soil_pH_10cm_depth", "Soil_temp_degC", "ALT_cm")
ins = ins[1:180,clmn]
ins = ins[!is.na(ins$Blk),]
colnames(ins) = c("block", "plot", "air_temp", "soil_pH", "soil_temp", "ALT_cm")
rm(clmn, ins_path)
cl =  4 # coloumn of the data
n_samp = 5 # number of samples for each plot
normpv = sapply(c(0:29), function(x) shapiro.test(can[(1 + n_samp*x):(n_samp*x+n_samp), cl])$p.value)
cl =  6
tpv1 = sapply(c(0:9), function(x) wilcox.test(can[(1 + n_samp*3*x):(n_samp*3*x+5), cl], can[(1 + n_samp*3*x + 5):(n_samp*3*x+n_samp*2), cl],  exact = F)$p.value)
cl =  6
tpv1 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+5), cl], ins[(1 + n_samp*3*x + 5):(n_samp*3*x+n_samp*2), cl],  exact = F)$p.value)
tpv2 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+n_samp), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
tpv3 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x + n_samp):(n_samp*3*x+n_samp*2), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
sum(c(tpv1, tpv2, tpv3) < 0.05)
cl =  6
krpv = sapply(c(0:9), function(x) kruskal.test(ins[(1 + n_samp*3*x):(n_samp*3*x+n_samp), cl], ins[(1 + n_samp*3*x + n_samp):(n_samp*3*x+n_samp*2), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl])$p.value)
sum(krpv < 0.05)
ynames = colnames(ins)[3:ncol(ins)]
plot_diff(ins, ynames[1])
plot_diff(ins, ynames[2])
plot_diff(ins, ynames[3])
plot_diff(ins, ynames[4])
source('~/Tundra_exp/R_code/functions.R')
plot_diff(ins, ynames[4])
debugSource('~/Tundra_exp/R_code/functions.R')
plot_diff(ins, ynames[4])
gg1
gg2
cowplot::plot_grid(gg1, gg2, ncol=1, nrow=2, common.legend = F, legend="right")
cowplot::plot_grid(gg1, gg2, ncol=1, nrow=2)
source('~/Tundra_exp/R_code/functions.R')
l1 <- plot_diff(ins, ynames[4])
l1 <- plot_diff(ins, ynames[4])
l1 <- plot_diff(ins, ynames[4])
gg1 <- l1[[1]]
gg2 <- l2[[2]]
gg2 <- l1[[2]]
cowplot::plot_grid(gg1, gg2, ncol=1, nrow=2)
cowplot::plot_grid(gg1 + rremove("legend"), gg2 + rremove("legend"), ncol=1, nrow=2)
gg_left <- cowplot::plot_grid(gg1 + rremove("legend"), gg2 + rremove("legend"), ncol=1, nrow=2)
cowplot::plot_grid(gg_left, cowplot::get_legend(gg1))
cowplot::plot_grid(gg_left, cowplot::get_legend(gg1), rel_widths = c(10, 2))
source('~/Tundra_exp/R_code/functions.R')
plot_diff(ins, ynames[4])
plot_diff(ins, ynames[1])
plot_diff(ins, ynames[2])
plot_diff(ins, ynames[3])
plot_diff(ins, ynames[4])
plot_list <- lapply(ynames, function(n) plot_diff(ins, n))
plot_list
cowplot::plot_grid(plotlist=plot_list)
cowplot::plot_grid(plotlist=plot_list, ncol=1)
ynames
plot_list <- lapply(ynames, function(n) plot_diff(ins, n) + ggtitle(n))
cowplot::plot_grid(plotlist=plot_list, ncol=1)
source('~/Tundra_exp/R_code/functions.R')
plot_list <- lapply(ynames, function(n) plot_diff(ins, n))
cowplot::plot_grid(plotlist=plot_list, ncol=1)
plot_list <- lapply(ynames, function(n) plot_diff(ins, n))
cowplot::plot_grid(plotlist=plot_list, ncol=1)
inst
ins
tpv1
tpv1
sum((tpv1+tpv2+tpv3)/3 < 0.05)
(tpv1+tpv2+tpv3)/3)
(tpv1+tpv2+tpv3)/3
library(dplyr)
ins
ins %>% split(ins$block)
split(ins, "block")
split(ins, "block")
library(reshape2)
ins
melt(ins, id.vars = c("block", "plot"))
melt(ins, id.vars = c("block", "plot")) %>%
group_by(variable, block) %>%
lapply(function(df) split(df, "variable"))
melt(ins, id.vars = c("block", "plot")) %>%
split("variable")
melt(ins, id.vars = c("block", "plot")) %>%
(function(x) split(x, x$variable))
melt(ins, id.vars = c("block", "plot")) %>%
(function(x) split(x, x$variable)) %>%
(function(x) split(x, x$plot))
melt(ins, id.vars = c("block", "plot")) %>%
(function(x) split(x, x$variable)) %>%
lapply(function(x) split(x, x$plot))
melt(ins, id.vars = c("block", "plot")) %>%
(function(x) split(x, x$variable))
melt(ins, id.vars = c("block", "plot")) %>%
(function(x) split(x, x$variable)) %>%
lapply(function(x) split(x, x$block))
wilcox3 <- function(dfs) {
c(
wilcox.test(dfs[[1]]$value, dfs[[2]]$value,  exact = F)$p.value,
wilcox.test(dfs[[1]]$value, dfs[[3]]$value,  exact = F)$p.value,
wilcox.test(dfs[[2]]$value, dfs[[3]]$value,  exact = F)$p.value)
}
ins$block
ins
melt(ins, id.vars = c("block", "plot"))
r <- melt(ins, id.vars = c("block", "plot"))
r
paste0(r$block, r$plot)
split(r, paste0(r$block, r$plot))
r2 <- split(r, paste0(r$block, r$variable))
r2
r2[[2]]
as.character(r2[[2]]$plot)
levels(r2[[2]]$plot)
unique(as.character(r2[[2]]$plot))
expand.grid(unique(as.character(r2[[2]]$plot)))
expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot)))
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot)))
duplicated(r2)
r2
duplicated(r2$Var1, r2$Var2)
r2$Var1 == r2$Var2
r2[r2$Var1 != r2$Var2]
r2[r2$Var1 != r2$Var2,]
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot))) %>%
filter(paste(Var1, Var2) != paste(Var2, Var1))
r <- melt(ins, id.vars = c("block", "plot"))
r2 <- split(r, paste0(r$block, r$variable))
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot))) %>%
filter(paste(Var1, Var2) != paste(Var2, Var1))
r2
r2
r2
paste(r2$Var1, r2$Var2)
paste(r2$Var2, r2$Var1)
paste(r2$Var1, r2$Var2) != paste(r2$Var2, r2$Var1)
r2
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot))) %>%
as.matrix() %>% apply(2, sort)
r2 <- split(r, paste0(r$block, r$variable))
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot))) %>%
as.matrix() %>% apply(2, sort)
r2
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot))) %>%
as.matrix() %>% apply(2, sort) %>% filter(Var1 != Var2)
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot))) %>%
as.matrix() %>% apply(2, sort) %>% as_tibble() %>% filter(Var1 != Var2)
r2 <- split(r, paste0(r$block, r$variable))
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot))) %>%
as.matrix() %>% apply(2, sort) %>% as_tibble() %>% filter(Var1 != Var2)
r2
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot))) %>%
as.matrix() %>% apply(2, sort)
r2 <- split(r, paste0(r$block, r$variable))
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot))) %>%
as.matrix() %>% apply(2, sort)
r2
r2[r2[,1] != r2[,2]]
r2[,1] != r2[,2]
r2
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot))) %>%
as.matrix() %>% apply(1, sort)
r2 <- split(r, paste0(r$block, r$variable))
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot))) %>%
as.matrix() %>% apply(1, sort)
r2
r2 <- split(r, paste0(r$block, r$variable))
r2 <- expand.grid(unique(as.character(r2[[2]]$plot)), unique(as.character(r2[[2]]$plot))) %>%
as.matrix() %>% apply(1, sort) %>% t()
r2[r2[,1] != r2[,2]]
r2
r2[r2[,1] != r2[,2]]
r2[r2[,1] != r2[,2],]
duplicated(r2[r2[,1] != r2[,2],])
r2[!duplicated(r2[r2[,1] != r2[,2],]),]
r2 <- r2[r2[,1] != r2[,2],]
r2[!duplicated(r2,]
r2[!duplicated(r2),]
cl =  4
tpv1 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+5), cl], ins[(1 + n_samp*3*x + 5):(n_samp*3*x+n_samp*2), cl],  exact = F)$p.value)
tpv2 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+n_samp), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
tpv3 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x + n_samp):(n_samp*3*x+n_samp*2), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
sum((tpv1+tpv2+tpv3)/3 < 0.05)
cl =  5
tpv1 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+5), cl], ins[(1 + n_samp*3*x + 5):(n_samp*3*x+n_samp*2), cl],  exact = F)$p.value)
tpv2 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+n_samp), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
tpv3 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x + n_samp):(n_samp*3*x+n_samp*2), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
sum((tpv1+tpv2+tpv3)/3 < 0.05)
cl =  6
tpv1 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+5), cl], ins[(1 + n_samp*3*x + 5):(n_samp*3*x+n_samp*2), cl],  exact = F)$p.value)
tpv2 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+n_samp), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
tpv3 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x + n_samp):(n_samp*3*x+n_samp*2), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
sum((tpv1+tpv2+tpv3)/3 < 0.05)
varnames = c("Air temperature, 째C.", "Soil pH at 10cm depth", "Soil temperature, 째C", "Active layer thickness, cm")
library(xlsx)
library(ggplot2)
library(ggpubr)
source("./functions.R")
ins_path <- "/home/lena/Tundra_exp/soil_variables_DPE.xlsx"
ins <- read.xlsx(ins_path, 1)  # read first sheet
clmn = colnames(ins) %in% c("Blk", "Plot.", "Air.temperature...C.", "Soil_pH_10cm_depth", "Soil_temp_degC", "ALT_cm")
ins = ins[1:180,clmn]
ins = ins[!is.na(ins$Blk),]
colnames(ins) = c("block", "plot", "air_temp", "soil_pH", "soil_temp", "ALT_cm")
varnames = c("Air temperature, 째C.", "Soil pH at 10cm depth", "Soil temperature, 째C", "Active layer thickness, cm")
rm(clmn, ins_path)
sapply(c(4:ncol(ins)))
library(xlsx)
library(ggplot2)
library(ggpubr)
source("./functions.R")
plot_list <- lapply(varnames, function(n) plot_diff(ins, n, n))
varnames
plot_list <- lapply(c(1:4), function(n) plot_diff(ins, ynames[n], varnames[n]))
ynames = colnames(ins)[3:ncol(ins)]
plot_list <- lapply(c(1:4), function(n) plot_diff(ins, ynames[n], varnames[n]))
ynames
varnames
source("./functions.R")
plot_list <- lapply(c(1:4), function(n) plot_diff(ins, ynames[n], varnames[n]))
plot_list <- lapply(ynames, function(n) plot_diff(ins, n, n))
source("./functions.R")
plot_list <- lapply(ynames, function(n) plot_diff(ins, n, n))
plot_list <- lapply(ynames, function(n) plot_diff(ins, n))
colnames(ins)
ins_path <- "/home/lena/Tundra_exp/soil_variables_DPE.xlsx"
ins <- read.xlsx(ins_path, 1)  # read first sheet
clmn = colnames(ins) %in% c("Blk", "Plot.", "Air.temperature...C.", "Soil_pH_10cm_depth", "Soil_temp_degC", "ALT_cm")
ins = ins[1:180,clmn]
ins = ins[!is.na(ins$Blk),]
colnames(ins) = c("block", "plot", "air_temp", "soil_pH", "soil_temp", "ALT_cm")
varnames = c("Air temperature, 째C.", "Soil pH at 10cm depth", "Soil temperature, 째C", "Active layer thickness, cm")
rm(clmn, ins_path)
plot_list <- lapply(ynames, function(n) plot_diff(ins, n))
source("./functions.R")
plot_list <- lapply(ynames, function(n) plot_diff(ins, n))
source("./functions.R")
plot_list <- lapply(ynames, function(n) plot_diff(ins, n))
library(plyr)
plot_list <- lapply(ynames, function(n) plot_diff(ins, n))
ins
ynames
plot_list <- lapply(ynames, function(n) plot_diff(ins, n))
plot_list <- lapply(ynames, function(n) plot_diff(ins, n))
datac
View(datac)
measurevar
?rename
source('~/Tundra_exp/R_code/./functions.R')
plot_list <- lapply(ynames, function(n) plot_diff(ins, n))
cowplot::plot_grid(plotlist=plot_list, ncol=1)
source("./functions.R")
plot_list <- lapply(c(1:4), function(n) plot_diff(ins, ynames[n], varnames[n]))
varnames = c("Air temperature, 째C.", "Soil pH at 10cm depth", "Soil temperature, 째C", "Active layer thickness, cm")
plot_list <- lapply(c(1:4), function(n) plot_diff(ins, ynames[n], varnames[n]))
source("./functions.R")
plot_list <- lapply(c(1:4), function(n) plot_diff(ins, ynames[n], varnames[n]))
cowplot::plot_grid(plotlist=plot_list, ncol=1)
plot_list[1]
clmn = colnames(ins) %in% c("Blk", "Plot.", "Air.temperature...C", "Soil_pH_10cm_depth", "Soil_temp_degC", "ALT_cm")
library(ggplot2)
x <- factor(rep(1:10, 100))
y <- rnorm(1000)
df <- data.frame(x=x, y=y)
ggplot(df, aes(x=x, y=y)) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="line", aes(group=1))  +
stat_summary(fun.y=mean, geom="point")
sins <- summarySE(ins, measurevar=ynames[2], groupvars=c("block","plot"), na.rm = T)
sins2 <- summarySE(ins, measurevar=ynames[2], groupvars=c("block"), na.rm = T)
colnames(sins)[4] = "y"
colnames(sins2)[3] = "y"
pd <- position_dodge(0.1) # move them .05 to the left and right
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#FF3399", "#663300", "#993399")
gg2 = ggplot(sins2, aes(x=block, y=y, colour=block)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = y,group=1), fun.y=mean, colour="red", geom="line",group=1)
gg2
sins2$type = "wet"
levels(sins2$block)
sins2$type[sins2$block %in% levels(sins2$block)[1:5],] = "dry"
sins2$type[sins2$block %in% levels(sins2$block)[1:5]] = "dry"
sins2$type
ggplot(sins2, aes(x=block, y=y, colour=block)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = y,group=type), fun.y=mean, colour="red", geom="line",group=1)
ggplot(sins2, aes(x=block, y=y, colour=block)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = y,group=type), fun.y=mean, colour="red", geom="line",group=type)
ggplot(sins2, aes(x=block, y=y, colour=block)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = y,group=type), fun.y=mean, colour="red", geom="line")
sins2$type = mean(sins2$y[sins2$block %in% levels(sins2$block)[1:5]])
sins2$type[sins2$block %in% levels(sins2$block)[6:10]] = mean(sins2$y[sins2$block %in% levels(sins2$block)[6:10]])
sins2$type
ggplot(sins2, aes(x=block, y=y, colour=block)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = y,group=type), fun.y=type, colour="red", geom="line")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = y,group=type), fun.y=type, colour="red", geom="line")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = type,group=type), fun.y=mean, colour="red", geom="line")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = type,group=type), fun.y=mean, colour=c("blue","red"), geom="line")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = type,group=type), fun.y=mean, colour=c("blue","red"), geom="line", group = 1)
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = type,group=type), fun.y=mean, colour=c(rep("blue",5),rep("red",5)), geom="line")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = type,group=type), fun.y=mean, colour=type, geom="line")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = type,group=type), fun.y=mean, colour=as.factor(type), geom="line")
sins <- summarySE(ins, measurevar=ynames[2], groupvars=c("block","plot"), na.rm = T)
sins2 <- summarySE(ins, measurevar=ynames[2], groupvars=c("block"), na.rm = T)
colnames(sins)[4] = "y"
colnames(sins2)[3] = "y"
pd <- position_dodge(0.1) # move them .05 to the left and right
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#FF3399", "#663300", "#993399")
sins2$type = mean(sins2$y[sins2$block %in% levels(sins2$block)[1:5]])
sins2$type[sins2$block %in% levels(sins2$block)[6:10]] = mean(sins2$y[sins2$block %in% levels(sins2$block)[6:10]])
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = type,group=type), fun.y=mean, colour=group, geom="line")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = type,group=type, color=group), fun.y=mean, geom="line")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = type,group=type, color=type), fun.y=mean, geom="line")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
stat_summary(aes(y = type,group=type, color=as.factor(type)), fun.y=mean, geom="line")
sins2$type
as.factor(sins2$type)
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
geom_line(aes(y = type,group=type, color=as.factor(type)))
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
geom_line(aes(y = type,group=type))
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
geom_line(aes(y = type,group=type, colour = type))
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
geom_line(aes(y = type,group=type, colour = as.factor(type)))
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
geom_line(aes(y = type,group=type))
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
geom_errorbar(aes(ymax=type, ymin=type), linetype="dashed")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
geom_errorbar(aes(ymax=type, ymin=type), linetype="dashed", colour = "black")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
geom_errorbar(aes(ymax=type, ymin=type), linetype="dashed", colour = "grey")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
geom_errorbar(aes(ymax=type, ymin=type), linetype="g", colour = "grey")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
geom_errorbar(aes(ymax=type, ymin=type), linetype=g, colour = "grey")
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
geom_errorbar(aes(ymax=type, ymin=type), linetype="longdash", colour = "grey")
source("./functions.R")
plot_diff(ins, ynames[2], varnames[2])
source("./functions.R")
plot_diff(ins, ynames[2], varnames[2])
ggplot(sins2, aes(x=block, y=y, colour=block, group = type)) +
geom_errorbar(aes(ymin=y-ci, ymax=y+ci), width=.1, position=pd) +
ylab(ynames[2]) +
geom_point(position=pd) + theme_bw() + scale_colour_manual(values=cbPalette) +
geom_errorbar(aes(ymax=type, ymin=type), linetype="longdash", colour = "grey")
source("functions.R")
plot_diff(ins, ynames[2], varnames[2])
source("functions.R")
plot_diff(ins, ynames[2], varnames[2])
source("functions.R")
plot_diff(ins, ynames[2], varnames[2])
source("functions.R")
plot_diff(ins, ynames[2], varnames[2])
plot_list <- lapply(c(1:4), function(n) plot_diff(ins, ynames[n], varnames[n]))
cowplot::plot_grid(plotlist=plot_list, ncol=1)
mvpv = sapply(c(4:ncol(ins)), function(cl) {
tpv1 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+5), cl], ins[(1 + n_samp*3*x + 5):(n_samp*3*x+n_samp*2), cl],  exact = F)$p.value)
tpv2 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+n_samp), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
tpv3 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x + n_samp):(n_samp*3*x+n_samp*2), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
return((tpv1+tpv2+tpv3)/3)
})
mwpv = sapply(c(4:ncol(ins)), function(cl) {
tpv1 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+5), cl], ins[(1 + n_samp*3*x + 5):(n_samp*3*x+n_samp*2), cl],  exact = F)$p.value)
tpv2 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+n_samp), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
tpv3 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x + n_samp):(n_samp*3*x+n_samp*2), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
return((tpv1+tpv2+tpv3)/3)
})
mwpv
# edit sum!
mwpv = sapply(c(4:ncol(ins)), function(cl) {
tpv1 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+5), cl], ins[(1 + n_samp*3*x + 5):(n_samp*3*x+n_samp*2), cl],  exact = F)$p.value)
tpv2 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+n_samp), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
tpv3 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x + n_samp):(n_samp*3*x+n_samp*2), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
return((tpv1+tpv2+tpv3)/3)
})
for (i in c(2:4)) {
print("There are significant differences in", sum(mwpv[,i]), " pairs of ", varnames[i], " variables within plots")
}
for (i in c(2:4)) {
print(paste0("There are significant differences in ", sum(mwpv[,i]), " pairs of ", varnames[i], " variables within plots"))
}
print(paste0("There are significant differences in ", sum(mwpv[,i]), " pairs of ", varnames[i+1], " variables within plots"))
for (i in c(1:3)) {
print(paste0("There are significant differences in ", sum(mwpv[,i]), " pairs of ", varnames[i+1], " variables within plots"))
}
for (i in c(1:3)) {
print(paste0("There are significant differences in ", sum(mwpv[,i] < 0.05), " pairs of \"", varnames[i+1], " variables within plots"))
}
for (i in c(1:3)) {
print(paste0("There are significant differences in ", sum(mwpv[,i] < 0.05), " pairs of \"", varnames[i+1], "\" variables within plots"))
}
for (i in c(1:3)) {
print(paste0("There are significant differences in ", sum(mwpv[,i] < 0.05), " pairs of '", varnames[i+1], "' variables within plots"))
}
for (i in c(1:3)) {
print(paste0("There are significant differences in ", sum(mwpv[,i] < 0.05), " pairs of '", varnames[i+1], "' variable within plots"))
}
# edit sum!
mwpv = sapply(c(4:ncol(ins)), function(cl) {
tpv1 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+5), cl], ins[(1 + n_samp*3*x + 5):(n_samp*3*x+n_samp*2), cl],  exact = F)$p.value)
tpv2 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x):(n_samp*3*x+n_samp), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
tpv3 = sapply(c(0:9), function(x) wilcox.test(ins[(1 + n_samp*3*x + n_samp):(n_samp*3*x+n_samp*2), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl],  exact = F)$p.value)
return(c(tpv1,tpv2,tpv3)/3)
})
for (i in c(1:3)) {
print(paste0("There are significant differences in ", sum(mwpv[,i] < 0.05), " pairs of '", varnames[i+1], "' variable within plots"))
}
mwpv
mwpv = sapply(c(4:ncol(ins)), function(cl) {
krpv = sapply(c(0:9), function(x) kruskal.test(ins[(1 + n_samp*3*x):(n_samp*3*x+n_samp), cl], ins[(1 + n_samp*3*x + n_samp):(n_samp*3*x+n_samp*2), cl], ins[(1 + n_samp*3*x + n_samp*2):(n_samp*3*x+n_samp*3), cl])$p.value)
return(sum(krpv < 0.05))
})
mwpv
